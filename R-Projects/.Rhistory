install.packages("PANDA")
wbcd <- read.csv("BreastCancer-data.csv", header=T, stringsAsFactors=F)
wbcd <- read.csv("BreastCancer-data.csv", header=T, stringsAsFactors=F)
library (pastecs)
stat.desc (wbcd['radius_mean'])
clear()
c(1,2,3,4) %>% Map(sqrt, .) %>%  Reduce(sum, .)
var <- c(1,2,3,4) %>% Map(sqrt, .) %>%  Reduce(sum, .)
c(1,2,3,4) %>% Map(sqrt, .) %>%  Reduce(sum, .)
library(magrittr)
c(1,2,3,4) %>% Map(sqrt, .) %>%  Reduce(sum, .)
c(1,2,3,4) %>% Map(sqrt, .)
var <- c(1,2,3,4) %>% Map(sqrt, .) %>%  Reduce(sum, .)
var(1,2,3)
var <- function(a,b,c){
return (a+b+c)
}
var(1,2,3)
var <- function(a,b,c){
x= sqrt(b)
a = a+x
return (a+b+c)
}
var(1,2,3)
install.packages("car")
install.packages("carTools")
# %% [code] {"_kg_hide-output":true,"execution":{"iopub.status.busy":"2022-08-06T09:03:16.258254Z","iopub.execute_input":"2022-08-06T09:03:16.259447Z","iopub.status.idle":"2022-08-06T09:03:16.292499Z"}}
library(dplyr)
library(ggplot2)
location <- "../input/factors-affecting-campus-placement/Placement_Data_Full_Class.csv"
placement.df <- read.csv(location)
location <-  "D:/github/R-Projects/Placement_Data_Full_Class.csv"
placement.df <- read.csv(location)
# select only relevant columns
colnames(placement.df)
placement.reg <- select(placement.df, degree_p, mba_p)
str(placement.reg)
placement.reg %>% cor()
# %% [code] {"execution":{"iopub.status.busy":"2022-08-06T08:59:54.544892Z","iopub.execute_input":"2022-08-06T08:59:54.569144Z","iopub.status.idle":"2022-08-06T08:59:54.585242Z"}}
str(placement.df)
# %% [code] {"execution":{"iopub.status.busy":"2022-08-06T08:59:54.586992Z","iopub.execute_input":"2022-08-06T08:59:54.587854Z","iopub.status.idle":"2022-08-06T08:59:54.979146Z"}}
# Basic Visualisation
ggplot(placement.reg, aes(degree_p, mba_p)) +
geom_point()
# %% [code] {"execution":{"iopub.status.busy":"2022-08-06T08:59:54.980692Z","iopub.execute_input":"2022-08-06T08:59:54.981692Z","iopub.status.idle":"2022-08-06T08:59:55.356682Z"}}
ggplot(placement.reg, aes(x = cut(degree_p, breaks = 5), y = mba_p)) +
geom_boxplot()
# %% [code] {"execution":{"iopub.status.busy":"2022-08-06T08:59:55.357891Z","iopub.execute_input":"2022-08-06T08:59:55.358840Z","iopub.status.idle":"2022-08-06T08:59:56.460455Z"}}
ggplot(placement.reg, aes(degree_p, mba_p)) +
geom_point() +
geom_smooth()
# %% [code] {"execution":{"iopub.status.busy":"2022-08-06T08:59:56.462043Z","iopub.execute_input":"2022-08-06T08:59:56.462695Z","iopub.status.idle":"2022-08-06T08:59:56.475652Z"}}
# model
# mba_p = b0 + b1*degree_p
model1 <- lm(mba_p ~ degree_p, data = placement.reg)
help(lm)
View(placement.df)
# %% [code] {"execution":{"iopub.status.busy":"2022-08-06T08:59:56.477177Z","iopub.execute_input":"2022-08-06T08:59:56.478139Z","iopub.status.idle":"2022-08-06T08:59:56.690753Z"}}
# Regression line
ggplot(placement.reg, aes(degree_p, mba_p)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
help(geom_smooth)
# %% [code] {"execution":{"iopub.status.busy":"2022-08-06T08:59:56.691655Z","iopub.execute_input":"2022-08-06T08:59:56.692456Z","iopub.status.idle":"2022-08-06T08:59:56.723046Z"}}
# Model assessment
summary(model1)
View(placement.reg)
View(placement.df)
# %% [code] {"execution":{"iopub.status.busy":"2022-08-06T08:59:56.477177Z","iopub.execute_input":"2022-08-06T08:59:56.478139Z","iopub.status.idle":"2022-08-06T08:59:56.690753Z"}}
# Regression line
ggplot(placement.reg, aes(degree_p, mba_p)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
# %% [code] {"execution":{"iopub.status.busy":"2022-08-06T08:59:56.691655Z","iopub.execute_input":"2022-08-06T08:59:56.692456Z","iopub.status.idle":"2022-08-06T08:59:56.723046Z"}}
# Model assessment
summary(model1)
# %% [code] {"execution":{"iopub.status.busy":"2022-08-06T08:59:56.724560Z","iopub.execute_input":"2022-08-06T08:59:56.726454Z","iopub.status.idle":"2022-08-06T08:59:56.738562Z"}}
# Characteristics
mba_p.hat <- fitted.values(model1)
# %% [code] {"execution":{"iopub.status.busy":"2022-08-06T08:59:56.691655Z","iopub.execute_input":"2022-08-06T08:59:56.692456Z","iopub.status.idle":"2022-08-06T08:59:56.723046Z"}}
# Model assessment
summary(model1)
# %% [code] {"execution":{"iopub.status.busy":"2022-08-06T08:59:56.724560Z","iopub.execute_input":"2022-08-06T08:59:56.726454Z","iopub.status.idle":"2022-08-06T08:59:56.738562Z"}}
# Characteristics
mba_p.hat <- fitted.values(model1)
head(mba_p.hat)
head(mba_p.hat)
help(fitted.values)
# %% [code] {"execution":{"iopub.status.busy":"2022-08-06T08:59:56.740349Z","iopub.execute_input":"2022-08-06T08:59:56.742047Z","iopub.status.idle":"2022-08-06T08:59:56.753560Z"}}
head(placement.reg$mba_p)
help(lm)
help(fitted.values)
head(placement.reg$mba_p)
View(placement.df)
#You may need to use the setwd(directory-name) command to
#change your working directory to wherever you saved the csv.
#Use getwd() to see what your current directory is.
dataset = read.csv("D:/github/R-Projects/data-marketing-budget-12mo.csv", header=T,
colClasses = c("numeric", "numeric", "numeric"))
View(dataset)
#Simple (One Variable) and Multiple Linear Regression Using lm()
simple.fit = lm(Sales~Spend, data=dataset)
summary(simple.fit)
multi.fit = lm(Sales~Spend+Month, data=dataset)
summary(multi.fit)
#Analyzing Residuals
layout(matrix(c(1,1,2,3),2,2,byrow=T))
#Spend x Residuals Plot
plot(simple.fit$resid~dataset$Spend[order(dataset$Spend)],
main="Spend x Residuals\nfor Simple Regression",
xlab="Marketing Spend", ylab="Residuals")
abline(h=0,lty=2)
#Histogram of Residuals
hist(simple.fit$resid, main="Histogram of Residuals",
ylab="Residuals")
#Q-Q Plot
qqnorm(simple.fit$resid)
qqline(simple.fit$resid)
# Residuals are normally distributed
library(fBasics)
jarqueberaTest(simple.fit$resid) #Test residuals for normality
layout(matrix(c(1,2,3,4),2,2,byrow=T))
plot(multi.fit$fitted, rstudent(multi.fit),
main="Multi Fit Studentized Residuals",
xlab="Predictions",ylab="Studentized Resid",
ylim=c(-2.5,2.5))
abline(h=0, lty=2)
plot(dataset$Month, multi.fit$resid,
main="Residuals by Month",
xlab="Month",ylab="Residuals")
abline(h=0,lty=2)
hist(multi.fit$resid,main="Histogram of Residuals")
qqnorm(multi.fit$resid)
qqline(multi.fit$resid)
# Residuals are Normally Distributed
library(fBasics)
# Residuals are independent
library(lmtest) #dwtest
dwtest(simple.fit) #Test for independence of residuals
layout(matrix(c(1,2,3,4),2,2,byrow=T))
plot(multi.fit$fitted, rstudent(multi.fit),
main="Multi Fit Studentized Residuals",
xlab="Predictions",ylab="Studentized Resid",
ylim=c(-2.5,2.5))
help(multi.fit)
summary(simple.fit)
multi.fit = lm(Sales~Spend+Month, data=dataset)
summary(multi.fit)
#Analyzing Residuals
layout(matrix(c(1,1,2,3),2,2,byrow=T))
#Spend x Residuals Plot
plot(simple.fit$resid~dataset$Spend[order(dataset$Spend)],
main="Spend x Residuals\nfor Simple Regression",
xlab="Marketing Spend", ylab="Residuals")
abline(h=0,lty=2)
#Histogram of Residuals
hist(simple.fit$resid, main="Histogram of Residuals",
ylab="Residuals")
#Q-Q Plot
qqnorm(simple.fit$resid)
qqline(simple.fit$resid)
# Residuals are normally distributed
library(fBasics)
jarqueberaTest(simple.fit$resid) #Test residuals for normality
# Residuals are independent
library(lmtest) #dwtest
dwtest(simple.fit) #Test for independence of residuals
layout(matrix(c(1,2,3,4),2,2,byrow=T))
plot(multi.fit$fitted, rstudent(multi.fit),
main="Multi Fit Studentized Residuals",
xlab="Predictions",ylab="Studentized Resid",
ylim=c(-2.5,2.5))
abline(h=0, lty=2)
plot(dataset$Month, multi.fit$resid,
main="Residuals by Month",
xlab="Month",ylab="Residuals")
abline(h=0,lty=2)
hist(multi.fit$resid,main="Histogram of Residuals")
qqnorm(multi.fit$resid)
qqline(multi.fit$resid)
# Residuals are Normally Distributed
library(fBasics)
jarqueberaTest(multi.fit$resid) #Test residuals for normality
# Residuals are independent
library(lmtest) #dwtest
dwtest(multi.fit) #Test for independence of residuals
#Null Hypothesis: Errors are serially UNcorrelated
#Results: DW = 2.1077, p-value = 0.3133
multi.fit
help(multi.fit)
help(multi.fit)
help(multi.fit)
multi.fit
help(lm)
multi.fit.residuals
residuals(multi.fit)
rank(multi.fit)
anova(multi.fit)
summary(multi.fit)
terms(multi.fit)
coefficients(multi.fit)
residuals(multi.fit)
mean(mba_p.hat) == mean(placement.reg$mba_p) # should be same
mod1residual <- residuals(model1)
head(mod1residual)
mean(mod1residual) # should be zero
sum(mod1residual) # should be zero
# Highlighting the Residuals
ggplot(placement.reg, aes(degree_p, mba_p)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
geom_segment(aes(xend = degree_p, yend = mba_p.hat), color = "red", size = 0.3)
# Histogram of residuals for understanding
residual.df <- as.data.frame(mod1residual)
ggplot(residual.df, aes(mod1residual)) +
geom_histogram(bins = 8, fill = "blue")
View(residual.df)
# Diagnostic Plots
plot(model1)
# Cook's distance
plot(model1, 4)
# select only relevant columns
colnames(placement.df)
placement.mlr <- placement.df %>% select(ends_with("_p"), -etest_p)
View(placement.reg)
View(placement.mlr)
help(select)
colnames(placement.mlr)
str(placement.mlr)
# Correlation among numeric columns
placement.mlr %>% cor()
# Correlation Visualisation
GGally::ggcorr(placement.mlr)
GGally::ggpairs(placement.mlr)
# Train and Test data
library(caTools) # to split data into train and test
install.packages("caTools")
library(caTools)
# Train and Test data
library(caTools) # to split data into train and test
set.seed(1001)
sample <- sample.split(placement.mlr$mba_p, SplitRatio = 0.80)
train <- subset(placement.mlr, sample == TRUE)
test <- subset(placement.mlr, sample == FALSE)
# MLR model
mlrmodel <- lm(mba_p ~ ., train)
mlrmodel
# Model assessment
summary(mlrmodel)
# Remove insignificant independent variable
mlrmodel1 <- lm(mba_p ~ hsc_p + degree_p, train)
summary(mlrmodel1)
# Residual analysis
plot(mlrmodel1)
# VIF
car::vif(mlrmodel1)
# Prediction on test data
mbapred <- predict(mlrmodel1, test)
data.frame(test$mba_p, mbapred)
# cross-validation
mse <- mean((test$mba_p - mbapred)^2)
rmse <- sqrt(mse)
rmse
prederror <- rmse / mean(test$mba_p)
prederror
View(placement.df)
View(placement.df)
library(dplyr)
library(dplyr)
library(ggplot2)
location <-  "D:/github/R-Projects/Placement_Data_Full_Class.csv"
placement.df <- read.csv(location)
View(placement.df)
View(placement.df)
placement.reg <- select(placement.df, degree_p, mba_p)
help("str.zoo")
help(str)
help("str")
help("str")
str(placement.reg)
placement.reg %>% cor()
str(placement.df)
# Basic Visualisation
ggplot(placement.reg, aes(degree_p, mba_p)) +
geom_point()
ggplot(placement.reg, aes(degree_p, mba_p)) +
geom_point() +
geom_smooth()
# model
# mba_p = b0 + b1*degree_p
model1 <- lm(mba_p ~ degree_p, data = placement.reg)
model1
# Regression line
ggplot(placement.reg, aes(degree_p, mba_p)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
# Model assessment
summary(model1)
# Characteristics
mba_p.hat <- fitted.values(model1)
head(placement.reg$mba_p)
mean(mba_p.hat) == mean(placement.reg$mba_p) # should be same
mod1residual <- residuals(model1)
head(mod1residual)
mean(mod1residual) # should be zero
sum(mod1residual) # should be zero
placement.reg
# Highlighting the Residuals
ggplot(placement.reg, aes(degree_p, mba_p)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
geom_segment(aes(xend = degree_p, yend = mba_p.hat), color = "red", size = 0.3)
# Histogram of residuals for understanding
residual.df <- as.data.frame(mod1residual)
ggplot(residual.df, aes(mod1residual)) +
geom_histogram(bins = 8, fill = "blue")
# Diagnostic Plots
plot(model1)
# Cook's distance
plot(model1, 4)
# select only relevant columns
colnames(placement.df)
placement.mlr <- placement.df %>% select(ends_with("_p"), -etest_p)
colnames(placement.mlr)
str(placement.mlr)
# Correlation among numeric columns
placement.mlr %>% cor()
# Correlation Visualisation
GGally::ggcorr(placement.mlr)
GGally::ggpairs(placement.mlr)
# Train and Test data
library(caTools) # to split data into train and test
# Train and Test data
library(caTools) # to split data into train and test
set.seed(1001)
sample <- sample.split(placement.mlr$mba_p, SplitRatio = 0.80)
train <- subset(placement.mlr, sample == TRUE)
test <- subset(placement.mlr, sample == FALSE)
# MLR model
mlrmodel <- lm(mba_p ~ ., train)
View(placement.mlr)
colnames(placement.mlr)
str(placement.mlr)
# Correlation among numeric columns
placement.mlr %>% cor()
# Correlation Visualisation
GGally::ggcorr(placement.mlr)
# Train and Test data
library(caTools) # to split data into train and test
set.seed(1001)
sample <- sample.split(placement.mlr$mba_p, SplitRatio = 0.80)
train <- subset(placement.mlr, sample == TRUE)
test <- subset(placement.mlr, sample == FALSE)
# MLR model
mlrmodel <- lm(mba_p ~ ., train)
mlrmodel
# Model assessment
summary(mlrmodel)
# Remove insignificant independent variable
mlrmodel1 <- lm(mba_p ~ hsc_p + degree_p, train)
summary(mlrmodel1)
# Residual analysis
plot(mlrmodel1)
# VIF
car::vif(mlrmodel1)
# Prediction on test data
mbapred <- predict(mlrmodel1, test)
data.frame(test$mba_p, mbapred)
# cross-validation
mse <- mean((test$mba_p - mbapred)^2)
rmse <- sqrt(mse)
rmse
prederror <- rmse / mean(test$mba_p)
prederror
View(placement.df)
data(AirPassengers)
data(AirPassengers)
class(AirPassengers)
start(AirPassengers)
end(AirPassengers)
frequency(AirPassengers)
summary(AirPassengers)
plot(AirPassengers)
plot(AirPassengers)
#This will plot the time series
abline(reg=lm(AirPassengers~time(AirPassengers)))
#This will print the cycle across years.
cycle(AirPassengers)
#This will aggregate the cycles and display a year on year trend
plot(aggregate(AirPassengers,FUN=mean))
#Box plot across months will give us a sense on seasonal effect
boxplot(AirPassengers~cycle(AirPassengers))
adf.test(diff(log(AirPassengers)), alternative="stationary", k=0)
install.packages("adfExplorer")
remove.packages("adfExplorer")
install.packages("adf.test")
adf.test(diff(log(AirPassengers)), alternative="stationary", k=0)
install.packages("aTSA")
library(aTSA)
adf.test(diff(log(AirPassengers)), alternative="stationary", k=0)
(
adf.test(diff(log(AirPassengers)), alternative="stationary", k=0)
adf.test(diff(log(AirPassengers)), alternative="stationary", k=0)
adf.test(diff(log(AirPassengers)), alternative="stationary", k=0)
if(!require('aTSA')) {
install.packages('aTSA')
library('aTSA')
}
adf.test(diff(log(AirPassengers)), alternative="stationary", k=0)
install.packages('aTSA')
install.packages("aTSA")
library('aTSA')
adf.test(diff(log(AirPassengers)), alternative="stationary", k=0)
diff(log(AirPassengers)
diff(log(AirPassengers)
library('aTSA')
install.packages('aTSA')
install.packages("aTSA")
library('aTSA')
diff(log(AirPassengers)
adf.test(diff(log(AirPassengers)), alternative="stationary", k=0)
adf.test(diff(log(AirPassengers)), alternative="stationary", k=0)
install.packages('aTSA')
install.packages("aTSA")
x <- arima.sim(list(order = c(1,0,0),ar = 0.2),n = 100)
adf.test(x)
stationary.test(x)
stationary.test(x)
library(aTSA)
stationary.test(x)
adf.test(diff(log(AirPassengers)), alternative="stationary", k=0)
stationary.test(x)
stationary.test(x, method = "pp")
stationary.test(diff(log(AirPassengers)), alternative="stationary", k=0)
stationary.test(diff(log(AirPassengers)))
AirPassengers
type(AirPassengers)
typeof(AirPassengers)
d <- data(AirPassengers)
x <- arima.sim(list(order = c(1,0,0),ar = 0.2),n = 100)
stationary.test(x)
data(AirPassengers)
class(AirPassengers)
start(AirPassengers)
end(AirPassengers)
frequency(AirPassengers)
summary(AirPassengers)
# 2. Exploration of Time Series Data in R
#The number of passengers are distributed across the spectrum
plot(AirPassengers)
#This will plot the time series
abline(reg=lm(AirPassengers~time(AirPassengers)))
#This will print the cycle across years.
cycle(AirPassengers)
#This will aggregate the cycles and display a year on year trend
plot(aggregate(AirPassengers,FUN=mean))
#Box plot across months will give us a sense on seasonal effect
boxplot(AirPassengers~cycle(AirPassengers))
#Box plot across months will give us a sense on seasonal effect
boxplot(AirPassengers~cycle(AirPassengers))
# install.packages('aTSA')
library('aTSA')
stationary.test(diff(log(AirPassengers)))
x <- arima.sim(list(order = c(1,0,0),ar = 0.2),n = 100)
stationary.test((log(AirPassengers)))
x <- arima.sim(list(order = c(1,0,0),ar = 0.2),n = 100)
stationary.test(x)
stationary.test((diff(AirPassengers)))
x <- arima.sim(list(order = c(1,0,0),ar = 0.2),n = 100)
stationary.test(x)
